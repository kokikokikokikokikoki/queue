//
//  QueuePresenter.swift
//  ququququ
//
//  Created by Buratsakorn Petchdee on 2/3/2565 BE.
//  Copyright (c) 2565 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import Foundation

protocol QueuePresentationLogic {
  func presentResponse(_ response: QueueModel.Response)
}

final class QueuePresenter {
  private weak var viewController: QueueDisplayLogic?
  
  init(viewController: QueueDisplayLogic?) {
    self.viewController = viewController
  }
}


// MARK: - QueuePresentationLogic
extension QueuePresenter: QueuePresentationLogic {
  
  func presentResponse(_ response: QueueModel.Response) {
    
    switch response {
      
    case .doSomething(let newItem, let isItem):
      presentDoSomething(newItem, isItem)
    }
  }
}


// MARK: - Private Zone
private extension QueuePresenter {
  
  func presentDoSomething(_ newItem: Int, _ isItem: Bool) {
    
    //prepare data for display and send it further
    
   //
      //viewController?.displayViewModel(.doSomething(viewModelData: NSObject()))
  }
}
