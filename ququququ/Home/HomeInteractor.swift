//
//  HomeInteractor.swift
//  ququququ
//
//  Created by Buratsakorn Petchdee on 21/2/2565 BE.
//  Copyright (c) 2565 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation

typealias HomeInteractable = HomeBusinessLogic

protocol HomeBusinessLogic {
  
  func doRequest()
  func doRequestList()
    
}
final class HomeInteractor: HomeBusinessLogic {
  
  
  private var presenter: HomePresentationLogic
  
  init(viewController: HomeDisplayLogic?) {
    self.presenter = HomePresenter(viewController: viewController)
  }
}


// MARK: - HomeBusinessLogic
extension HomeInteractor {
  
  func doRequest() {
      let url = URL(string: "http://localhost:8882/hello-world")!

      let task = URLSession.shared.dataTask(with: url, completionHandler: { (data, response, error) in
          let jsonDecoder = JSONDecoder()
          let model = try! jsonDecoder.decode(HomeModel.Response.self, from: data!)
          self.presenter.presentResponse(viewModel: model)
      })

      task.resume()
  }
    
    func doRequestList() {
        let url = URL(string: "http://localhost:8882/queuelist")!

        let task = URLSession.shared.dataTask(with: url, completionHandler: { (data, response, error) in
            let jsonDecoder = JSONDecoder()
            let model = try! jsonDecoder.decode([HomeModel.List].self, from: data!)
            
            self.presenter.listResponse(viewModel: model)
        })

        task.resume()
    }

    
}
