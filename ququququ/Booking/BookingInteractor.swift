//
//  BookingInteractor.swift
//  ququququ
//
//  Created by Buratsakorn Petchdee on 1/3/2565 BE.
//  Copyright (c) 2565 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Foundation


protocol BookingBusinessLogic {
    
    func doRequest(_ request: BookingModel.Request)
}

class BookingInteractor {
    
    private var presenter: BookingPresentationLogic
    
    init(viewController: BookingDisplayLogic?) {
        self.presenter = BookingPresenter(viewController: viewController)
    }
    
}


// MARK: - BookingBusinessLogic
extension BookingInteractor: BookingBusinessLogic {
    
    func doRequest(_ request: BookingModel.Request) {
        DispatchQueue.global(qos: .userInitiated).async {
            
            switch request {
                
            case .doSomething(let item):
                self.doSomething(item)
            }
        }
    }
}


// MARK: - Private Zone
private extension BookingInteractor {
    
    func doSomething(_ item: Int) {
        
        //construct the Service right before using it
        //let serviceX = factory.makeXService()
        
        // get new data async or sync
        //let newData = serviceX.getNewData()
        
        presenter.presentResponse(.doSomething(newItem: item + 1, isItem: true))
    }
}
