//
//  HomeViewController.swift
//  ququququ
//
//  Created by Buratsakorn Petchdee on 21/2/2565 BE.
//  Copyright (c) 2565 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Swift Xcode Templates(https://github.com/Andrei-Popilian/VIP_Design_Xcode_Template)
//  so you can apply clean architecture to your iOS and MacOS projects,
//  see more http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic where Self: UIViewController {
  
  func displayViewModel(_ viewModel: HomeModel.ViewModel)
}

 final class HomeViewController: UIViewController,UITableViewDelegate,UITableViewDataSource{
  
    
   
   
     
   
    private let mainView: HomeView
  private var interactor: HomeInteractable!
  private var router: HomeRouting!
  
  init(mainView: HomeView, dataSource: HomeModel.DataSource) {
    self.mainView = mainView
    
    super.init(nibName: nil, bundle: nil)
    interactor = HomeInteractor(viewController: self, dataSource: dataSource)
    router = HomeRouter(viewController: self)
  }
  
    
    override func viewDidLoad() {
    super.viewDidLoad()
    //interactor.doSomething(item: 22)
//      tableView.delegate = self
//      tableView.dataSource = self
//      
  }
  
  override func loadView() {
    view = mainView
  }
    
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 6
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "HomeCell", for: indexPath) as? HomeViewCell else {
            return UITableViewCell()
         }
//        let identifier = tableView.dequeueReusableCell(withIdentifier: "HomeCell", for : indexPath)
//        return identifier
        return cell
    }
  
  @available(*, unavailable)
  required init?(coder: NSCoder) {
    fatalError("init(coder:) has not been implemented, You should't initialize the ViewController through Storyboards")
  }
}


// MARK: - HomeDisplayLogic
extension HomeViewController: HomeDisplayLogic {
  
  func displayViewModel(_ viewModel: HomeModel.ViewModel) {
    DispatchQueue.main.async {
      switch viewModel {
        
      case .doSomething(let viewModel):
        self.displayDoSomething(viewModel)
      }
    }
  }
}


// MARK: - HomeViewDelegate
extension HomeViewController: HomeViewDelegate {
  
  func sendDataBackToParent(_ data: Data) {
    //usually this delegate takes care of users actions and requests through UI
    
    //do something with the data or message send back from mainView
  }
}


// MARK: - Private Zone
private extension HomeViewController {
  
  func displayDoSomething(_ viewModel: NSObject) {
    print("Use the mainView to present the viewModel")
    //example of using router
    router.routeTo(.xScene(xData: 22))
  }
}
